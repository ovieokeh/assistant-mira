datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ConversionState {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model ConversionJob {
  id           String          @id
  user         String
  url          String
  currentState ConversionState @default(PENDING)
}

model Password {
  hash String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @unique
}

enum MessagingState {
  CHAT
  ACTION
}

model User {
  id           Int                    @id @default(autoincrement())
  createdAt    DateTime               @default(now())
  updatedAt    DateTime?              @updatedAt
  name         String
  phone        String                 @unique
  email        String?                @unique
  profile      Profile?
  messages     Message[]
  currentState MessagingState         @default(CHAT)
  actions      Action[]
  oauthCode    UserToGoogleOAuthCode?
  password     Password?
}

model UserToGoogleOAuthCode {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authCode     String? @unique
  token        String? @unique
  refreshToken String? @unique
}

model Profile {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  data      String
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum Role {
  system
  user
  assistant
}

model Message {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  content   String
  role      Role
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actionId  Int?
  action    Action?   @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hash      Int?
}

model Action {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime?    @updatedAt
  name      String
  messages  Message[]
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  status    ActionStatus @default(PENDING)
  tool      String
}

enum ActionStatus {
  PENDING
  CANCELLED
  COMPLETED
}
